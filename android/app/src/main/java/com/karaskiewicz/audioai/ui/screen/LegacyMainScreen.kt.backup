package com.karaskiewicz.audioai.ui.screen

import android.Manifest
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.animation.core.animateFloatAsState
import androidx.compose.animation.core.tween
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.interaction.MutableInteractionSource
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Delete
import androidx.compose.material.icons.filled.Mic
import androidx.compose.material.icons.filled.Pause
import androidx.compose.material.icons.filled.PlayArrow
import androidx.compose.material.icons.filled.Settings
import androidx.compose.material.icons.filled.Stop
import androidx.compose.material.ripple.rememberRipple
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableIntStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.scale
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.core.content.ContextCompat
import androidx.lifecycle.viewmodel.compose.viewModel
import com.karaskiewicz.audioai.domain.model.RecordingState
import com.karaskiewicz.audioai.ui.components.AnimatedWave
import com.karaskiewicz.audioai.ui.components.ScribelyLogo
import com.karaskiewicz.audioai.ui.theme.UIConfig
import com.karaskiewicz.audioai.ui.viewmodel.MainViewModel
import kotlinx.coroutines.delay

@Composable
fun MainScreen(
  onNavigateToSettings: () -> Unit = {},
  viewModel: MainViewModel = viewModel(),
) {
  val context = LocalContext.current
  val recordingState by viewModel.recordingState.collectAsState()
  val recordingDuration by viewModel.recordingDuration.collectAsState()
  val errorMessage by viewModel.errorMessage.collectAsState()
  val successMessage by viewModel.successMessage.collectAsState()

  // Animation state for timer tick effect
  var tickTrigger by remember { mutableIntStateOf(0) }
  val timerScale by animateFloatAsState(
    targetValue = if (tickTrigger % 2 == 0) 1f else 1.04f,
    animationSpec = tween(200),
    finishedListener = { if (recordingState == RecordingState.RECORDING) tickTrigger++ },
    label = "timerTick",
  )

  // Trigger timer animation every second during recording
  LaunchedEffect(recordingState, recordingDuration) {
    if (recordingState == RecordingState.RECORDING) {
      delay(1000)
      tickTrigger++
    }
  }

  // Permission launcher
  val permissionLauncher = rememberLauncherForActivityResult(
    contract = ActivityResultContracts.RequestPermission(),
  ) { isGranted ->
    if (isGranted) {
      viewModel.startRecording(context)
    } else {
      // TODO: Show error message for permission denied
    }
  }

  // Helper function to format time
  fun formatTime(totalSeconds: Long): String {
    val minutes = totalSeconds / 60
    val seconds = totalSeconds % 60
    return String.format("%02d:%02d", minutes, seconds)
  }

  // Main layout
  Box(
    modifier = Modifier
      .fillMaxSize()
      .background(UIConfig.Colors.DefaultBackground)
      .padding(UIConfig.Spacing.ScreenPadding),
  ) {
    Column(
      modifier = Modifier.fillMaxSize(),
    ) {
      // Header with logo (top left) and settings (top right)
      Box(
        modifier = Modifier
          .fillMaxWidth()
          .height(UIConfig.Spacing.HeaderHeight),
      ) {
        // Logo in top left
        ScribelyLogo(
          modifier = Modifier
            .align(Alignment.CenterStart)
            .padding(start = UIConfig.Spacing.LogoPadding),
        )

        // Settings button in top right
        IconButton(
          onClick = onNavigateToSettings,
          modifier = Modifier
            .align(Alignment.CenterEnd)
            .padding(end = UIConfig.Spacing.LogoPadding),
        ) {
          Icon(
            imageVector = Icons.Default.Settings,
            contentDescription = "Settings",
            tint = UIConfig.Colors.SecondaryTextColor,
            modifier = Modifier.size(UIConfig.Sizing.SettingsIconSize),
          )
        }
      }

      // Main content area
      Column(
        modifier = Modifier
          .fillMaxWidth()
          .weight(1f),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center,
      ) {
        // Timer section with animated wave
        Box(
          modifier = Modifier.height(UIConfig.Spacing.TimerSectionHeight),
          contentAlignment = Alignment.Center,
        ) {
          // Animated wave (shown above timer during recording)
          if (recordingState == RecordingState.RECORDING) {
            AnimatedWave(
              modifier = Modifier.align(Alignment.TopCenter),
            )
          }

          // Large timer display
          Text(
            text = formatTime(recordingDuration),
            style = MaterialTheme.typography.displayLarge.copy(
              fontSize = UIConfig.Sizing.TimerTextSize,
              fontWeight = FontWeight.Light,
              letterSpacing = UIConfig.Typography.TimerLetterSpacing,
              color = UIConfig.Colors.TimerTextColor,
            ),
            textAlign = TextAlign.Center,
            modifier = Modifier.scale(timerScale),
          )
        }

        Spacer(modifier = Modifier.height(UIConfig.Spacing.TimerBottomMargin))

        // Controls section
        Box(
          modifier = Modifier.height(UIConfig.Spacing.ControlsHeight),
          contentAlignment = Alignment.Center,
        ) {
          when (recordingState) {
            RecordingState.IDLE -> {
              // Single record button
              Surface(
                modifier = Modifier
                  .size(UIConfig.Sizing.RecordButtonSize)
                  .clickable(
                    indication = rememberRipple(),
                    interactionSource = remember { MutableInteractionSource() },
                  ) {
                    when (
                      ContextCompat.checkSelfPermission(
                        context,
                        Manifest.permission.RECORD_AUDIO,
                      )
                    ) {
                      android.content.pm.PackageManager.PERMISSION_GRANTED -> {
                        viewModel.startRecording(context)
                      }
                      else -> {
                        permissionLauncher.launch(Manifest.permission.RECORD_AUDIO)
                      }
                    }
                  },
                shape = CircleShape,
                color = UIConfig.Colors.ScribelyRed,
                shadowElevation = UIConfig.Sizing.ButtonElevation,
              ) {
                Box(contentAlignment = Alignment.Center) {
                  Icon(
                    imageVector = Icons.Default.Mic,
                    contentDescription = "Record",
                    tint = Color.White,
                    modifier = Modifier.size(UIConfig.Sizing.RecordIconSize),
                  )
                }
              }
            }

            RecordingState.RECORDING -> {
              // Three buttons: empty, pause, stop
              Row(
                horizontalArrangement = Arrangement.spacedBy(UIConfig.Spacing.ButtonSpacing),
                verticalAlignment = Alignment.CenterVertically,
              ) {
                // Empty space (invisible button for layout)
                Spacer(modifier = Modifier.size(UIConfig.Sizing.MainButtonSize))

                // Pause button
                Surface(
                  modifier = Modifier
                    .size(UIConfig.Sizing.MainButtonSize)
                    .clickable(
                      indication = rememberRipple(),
                      interactionSource = remember { MutableInteractionSource() },
                    ) { viewModel.pauseRecording(context) },
                  shape = CircleShape,
                  color = UIConfig.Colors.WhiteBackground,
                  shadowElevation = UIConfig.Sizing.ButtonElevation,
                ) {
                  Box(contentAlignment = Alignment.Center) {
                    Icon(
                      imageVector = Icons.Default.Pause,
                      contentDescription = "Pause",
                      tint = UIConfig.Colors.ScribelyGray,
                      modifier = Modifier.size(UIConfig.Sizing.ButtonIconSize),
                    )
                  }
                }

                // Stop button
                Surface(
                  modifier = Modifier
                    .size(UIConfig.Sizing.MainButtonSize)
                    .clickable(
                      indication = rememberRipple(),
                      interactionSource = remember { MutableInteractionSource() },
                    ) { viewModel.finishRecording(context) },
                  shape = CircleShape,
                  color = UIConfig.Colors.ScribelyRed,
                  shadowElevation = UIConfig.Sizing.ButtonElevation,
                ) {
                  Box(contentAlignment = Alignment.Center) {
                    Icon(
                      imageVector = Icons.Default.Stop,
                      contentDescription = "Stop",
                      tint = Color.White,
                      modifier = Modifier.size(UIConfig.Sizing.ButtonIconSize),
                    )
                  }
                }
              }
            }

            RecordingState.PAUSED -> {
              // Three buttons: discard, play, stop
              Row(
                horizontalArrangement = Arrangement.spacedBy(UIConfig.Spacing.ButtonSpacing),
                verticalAlignment = Alignment.CenterVertically,
              ) {
                // Discard button
                Surface(
                  modifier = Modifier
                    .size(UIConfig.Sizing.MainButtonSize)
                    .clickable(
                      indication = rememberRipple(),
                      interactionSource = remember { MutableInteractionSource() },
                    ) {
                      viewModel.resetRecording(context)
                      // TODO: Add actual discard functionality
                    },
                  shape = CircleShape,
                  color = UIConfig.Colors.WhiteBackground,
                  shadowElevation = UIConfig.Sizing.ButtonElevation,
                ) {
                  Box(contentAlignment = Alignment.Center) {
                    Icon(
                      imageVector = Icons.Default.Delete,
                      contentDescription = "Discard",
                      tint = UIConfig.Colors.ScribelyRed,
                      modifier = Modifier.size(UIConfig.Sizing.ButtonIconSize),
                    )
                  }
                }

                // Resume/Play button
                Surface(
                  modifier = Modifier
                    .size(UIConfig.Sizing.MainButtonSize)
                    .clickable(
                      indication = rememberRipple(),
                      interactionSource = remember { MutableInteractionSource() },
                    ) { viewModel.resumeRecording(context) },
                  shape = CircleShape,
                  color = UIConfig.Colors.WhiteBackground,
                  shadowElevation = UIConfig.Sizing.ButtonElevation,
                ) {
                  Box(contentAlignment = Alignment.Center) {
                    Icon(
                      imageVector = Icons.Default.PlayArrow,
                      contentDescription = "Resume",
                      tint = UIConfig.Colors.ScribelyGray,
                      modifier = Modifier.size(UIConfig.Sizing.ButtonIconSize),
                    )
                  }
                }

                // Stop button
                Surface(
                  modifier = Modifier
                    .size(UIConfig.Sizing.MainButtonSize)
                    .clickable(
                      indication = rememberRipple(),
                      interactionSource = remember { MutableInteractionSource() },
                    ) { viewModel.finishRecording(context) },
                  shape = CircleShape,
                  color = UIConfig.Colors.ScribelyRed,
                  shadowElevation = UIConfig.Sizing.ButtonElevation,
                ) {
                  Box(contentAlignment = Alignment.Center) {
                    Icon(
                      imageVector = Icons.Default.Stop,
                      contentDescription = "Stop",
                      tint = Color.White,
                      modifier = Modifier.size(UIConfig.Sizing.ButtonIconSize),
                    )
                  }
                }
              }
            }

            else -> {
              // Default case - show record button
              Surface(
                modifier = Modifier
                  .size(UIConfig.Sizing.RecordButtonSize)
                  .clickable(
                    indication = rememberRipple(),
                    interactionSource = remember { MutableInteractionSource() },
                  ) { viewModel.startRecording(context) },
                shape = CircleShape,
                color = UIConfig.Colors.ScribelyRed,
                shadowElevation = UIConfig.Sizing.ButtonElevation,
              ) {
                Box(contentAlignment = Alignment.Center) {
                  Icon(
                    imageVector = Icons.Default.Mic,
                    contentDescription = "Record",
                    tint = Color.White,
                    modifier = Modifier.size(UIConfig.Sizing.RecordIconSize),
                  )
                }
              }
            }
          }
        }
      }

      // Footer space
      Spacer(modifier = Modifier.height(UIConfig.Spacing.FooterHeight))
    }

    // Error/Success messages at bottom
    errorMessage?.let { message ->
      Card(
        modifier = Modifier
          .fillMaxWidth()
          .padding(UIConfig.Spacing.MediumSpacing)
          .align(Alignment.BottomCenter),
        colors = CardDefaults.cardColors(
          containerColor = MaterialTheme.colorScheme.errorContainer,
        ),
        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),
      ) {
        Text(
          text = message,
          style = MaterialTheme.typography.bodyMedium,
          color = MaterialTheme.colorScheme.onErrorContainer,
          modifier = Modifier.padding(UIConfig.Sizing.ContainerPadding),
          textAlign = TextAlign.Center,
        )
      }
    }

    successMessage?.let { message ->
      Card(
        modifier = Modifier
          .fillMaxWidth()
          .padding(UIConfig.Spacing.MediumSpacing)
          .align(Alignment.BottomCenter),
        colors = CardDefaults.cardColors(
          containerColor = UIConfig.Colors.ScribelyRedLight,
        ),
        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),
      ) {
        Text(
          text = message,
          style = MaterialTheme.typography.bodyMedium,
          color = UIConfig.Colors.PrimaryTextColor,
          modifier = Modifier.padding(UIConfig.Sizing.ContainerPadding),
          textAlign = TextAlign.Center,
        )
      }
    }
  }
}
